unit UfrmEmailDateSend;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Data.DB, Data.Win.ADODB;

type
  TForm1 = class(TForm)
    spEmailSendOnDate: TADOStoredProc;
    spEmailSendOnDateName: TStringField;
    spEmailSendOnDateEmailDate: TDateTimeField;
    spEmailSendOnDateStartDate: TDateTimeField;
    spStatementAccountListing: TADOStoredProc;
    spStatementAccountListingID: TLargeintField;
    spStatementAccountListingClientNo: TStringField;
    spStatementAccountListingLongName: TStringField;
    spStatementAccountListingPortfolioValue: TBCDField;
    spStatementAccountListingEmailAddress: TStringField;
    spStatementAccountListingEmailAddress2: TStringField;
    spStatementAccountListingEmailStatement: TBooleanField;
    spStatementAccountListingHoldStatement: TBooleanField;
    spStatementAccountListingAccountID: TIntegerField;
    dsStatementAccountListing: TDataSource;
    dsEmailSendOnDate: TDataSource;
    spClearPrintedAccounts: TADOStoredProc;
    procedure ExecuteSend(Sender: TObject);
  private
    { Private declarations }
  public
    { Public declarations }
  end;

var
  Form1: TForm1;

implementation
uses  UdtmMain, UfrmQuickReports, UfrmAccountSearch,
  UfrmUTQuickReports;

{$R *.dfm}

procedure TfrmEmailDateSend.ExecuteSend(Sender: TObject);
var
  StatCount, CurPos : Integer;
  StatURL , CCAddress: String;
  CounterpartyID : String[20]; // TAU
  StartYear : string[4];
  StartMonth : string[2];
  StartDay : String[2];
  EndYear : string[4];
  EndMonth : string[2];
  EndDay : String[2];
  Year, Month, Day : Word;
  PostData : TStringList;
  NavParam: OleVariant;
  MailFrom: String;
  MailTo: String;
  MailSubject: String;
  SendMail: Boolean;
begin
    with spEmailSendOnDate do
    begin
        close;
        Parameters.ParamByName('@Date').Value := edtStatEndDate.Date;
        ExecProc;
        Open;
        First;
    end;

    if spEmailSendOnDateName.Value = 'Consolidated'then
    begin

        CurPos := 0;
        POSTData := TStringList.create;

        with spStatementAccountListing do
        begin
            close;
            Parameters.ParamByName('@ValueDate').Value := spEmailSendOnDateStartDate.Date;
            Parameters.ParamByName('@CustodialGroup').Value := 'CBZ Custodial Services';
            Parameters.ParamByName('@NameFrom').Value := '';
            Parameters.ParamByName('@NameTo').Value := '';
            Parameters.ParamByName('@Equities').Value := 0;
            Parameters.ParamByName('@UnitTrust').Value := 0;
            Parameters.ParamByName('@Consolidated').Value := 1;
            Parameters.ParamByName('@ManagedClient').Value :=0;
            Parameters.ParamByName('@All').Value := 1;
            Parameters.ParamByName('@EmailOnly').Value := 1
            Parameters.ParamByName('@EmailAllClients').Value := 0;
            ExecProc;
            Open;
            First;
            StatCount := spStatementAccountListing.RecordCount;
        end;

        pbStatProgress.Properties.Max := StatCount;
        pbStatProgress.Position := CurPos;


        //printing the statements
        while not spStatementAccountListing.Eof do
        begin

            if(spStatementAccountListingEmailStatement.Value) and
               ((spStatementAccountListingEmailAddress.Value <> '') or (spStatementAccountListingEmailAddress.Value <> '')) then
            begin
                 if dtmMain.StringParameter('Default E-mail From')<>'' then
                      MailFrom := dtmMain.StringParameter('Default E-mail From')
                 else if dtmMain.StringParameter('SMTP Username') <> '' then
                      MailFrom := dtmMain.StringParameter('SMTP Username')
                 else
                     MailFrom := '';
                MailTo :=
                    spStatementAccountListingEmailAddress.Value + ',' +
                    spStatementAccountListingEmailAddress2.Value + ',' +
                    dtmmain.StringParameter('Default Statement CC');
                MailSubject := 'STATEMENT - ' + spStatementAccountListingClientNo.Value;
                SendMail := True;
            end else
                SendMail := False;

            pbStatProgress.Properties.Text := 'Printing (' + spStatementAccountListingClientNo.Value + ')';

            with frmUTQuickReports do
            begin
                with spRptConsolidated do
                begin
                    Close;
                    Parameters.ParamByName('@ClientID').Value :=  spStatementAccountListingID.Value;
                    Parameters.ParamByName('@StartDate').Value := spEmailSendOnDateStartDate.Date;
                    Parameters.ParamByName('@EndDate').Value := spEmailSendOnDateEmailDate.Date;
                    Parameters.ParamByName('@EQ').Value := 1;
                    Parameters.ParamByName('@MM').Value := 1;
                    Parameters.ParamByName('@UT').Value := 1;
                    Parameters.ParamByName('@Trxn').Value := 1;
                    Parameters.ParamByName('@Port').Value := 1;
                    ExecProc;
                    Open;
                end;

                if SendMail then begin
                    dtmMain.SetStringParameter('E-mail Statement Attachment', dteAttachment.Text);
                    dtmMain.EmailReport(QRConsolidated, MailFrom, MailTo, dtmMain.StringParameter('SMTP Password'), MailSubject, True);
                    dtmMain.SetStringParameter('E-mail Statement Attachment', '');
                end;
            end;
            with cmdSetStatementPrinted do
            begin
                Parameters.ParamByName('@AccountID').value := spStatementAccountListingID.value;
                execute;
            end;

            Curpos := CurPos + 1;
            spStatementAccountListing.Next;
            pbStatProgress.Position := CurPos;
            Application.ProcessMessages;

        end;
        with spClearPrintedAccounts do
        begin
          ExecProc;
        end;
        MessageBox(Self.Handle, 'Statement printing complete.', 'Completed...', MB_ICONINFORMATION or MB_OK);
        pbStatProgress.Properties.Text := '';
        pbStatProgress.Position := 0;
    end;
end;

end.
